/*
 * Decompiled with CFR <Could not determine version>.
 * 
 * Could not load the following classes:
 *  com.google.common.cache.Cache
 *  com.google.common.cache.CacheBuilder
 *  org.apache.commons.lang.StringUtils
 *  org.bukkit.Bukkit
 *  org.bukkit.event.EventHandler
 *  org.bukkit.event.player.AsyncPlayerPreLoginEvent
 *  org.bukkit.event.player.AsyncPlayerPreLoginEvent$Result
 *  org.bukkit.plugin.Plugin
 *  org.bukkit.scheduler.BukkitTask
 */
package xyz.yooniks.protector.bukkit.listener.normal;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang.StringUtils;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitTask;
import xyz.yooniks.protector.bukkit.ProtectorSpigotLogger;
import xyz.yooniks.protector.bukkit.config.MessagesConfig;
import xyz.yooniks.protector.bukkit.listener.normal.basic.CustomListener;
import xyz.yooniks.protector.bukkit.whitelist.WhitelistManager;
import xyz.yooniks.protector.http.URLHelper;

public class SpoofUUIDExploitListener
extends CustomListener {
    private final WhitelistManager whitelistManager;
    private final Cache<UUID, String> cachedPremiumUUIDs = CacheBuilder.newBuilder().expireAfterWrite((long)2L, (TimeUnit)TimeUnit.HOURS).build();
    private final Plugin plugin;
    private volatile boolean runTask;

    private /* synthetic */ String cachedPremiumUUID(UUID a) {
        SpoofUUIDExploitListener a2;
        return (String)a2.cachedPremiumUUIDs.getIfPresent((Object)a);
    }

    @EventHandler(ignoreCancelled=true)
    public void onConnect(AsyncPlayerPreLoginEvent a) {
        SpoofUUIDExploitListener a2;
        if (a2.whitelistManager.isWhitelist((String)a.getName())) {
            return;
        }
        String string = a.getName();
        String string2 = a.getAddress().getHostName();
        UUID uUID = a.getUniqueId();
        if (uUID == null) return;
        if (string == null) return;
        if (string2 == null) {
            return;
        }
        String string3 = StringUtils.replace((String)a.getUniqueId().toString(), (String)"-", (String)"");
        String string4 = a2.cachedPremiumUUID((UUID)uUID);
        if (string4 != null && !string4.contains((CharSequence)string3)) {
            a.disallow((AsyncPlayerPreLoginEvent.Result)AsyncPlayerPreLoginEvent.Result.KICK_OTHER, (String)new StringBuilder().insert((int)0, (String)a2.PREFIX).append((String)MessagesConfig.UUID_SPOOF$KICK_MESSAGE).toString());
            return;
        }
        string4 = StringUtils.replace((String)UUID.nameUUIDFromBytes((byte[])new StringBuilder().insert((int)0, (String)"OfflinePlayer:").append((String)string).toString().getBytes()).toString(), (String)"-", (String)"");
        if (string3.equals((Object)string4)) return;
        try {
            if (a2.runTask) {
                Bukkit.getScheduler().runTaskAsynchronously((Plugin)a2.plugin, () -> {
                    try {
                        SpoofUUIDExploitListener a6;
                        String string = URLHelper.readContent((URL)new URL((String)new StringBuilder().insert((int)0, (String)"https://api.mojang.com/users/profiles/minecraft/").append((String)string).toString()));
                        a6.cachedPremiumUUIDs.put((Object)uUID, (Object)string);
                        if (string.contains((CharSequence)string3)) return;
                        if ((uUID = Bukkit.getPlayer((UUID)uUID)) != null && uUID.getAddress().getHostName().equals((Object)string2)) {
                            uUID.kickPlayer((String)(a6.PREFIX + MessagesConfig.UUID_SPOOF$KICK_MESSAGE));
                        }
                        a.disallow((AsyncPlayerPreLoginEvent.Result)AsyncPlayerPreLoginEvent.Result.KICK_OTHER, (String)new StringBuilder().insert((int)0, (String)a6.PREFIX).append((String)MessagesConfig.UUID_SPOOF$KICK_MESSAGE).toString());
                        return;
                    }
                    catch (Exception exception) {
                        ProtectorSpigotLogger.warning((String)new StringBuilder().insert((int)0, (String)"Could not read account info (from mojang) of ").append((String)string).append((String)"! ").append((String)exception.getMessage()).append((String)" runTask is true.").toString());
                    }
                });
                return;
            }
            string2 = URLHelper.readContent((URL)new URL((String)new StringBuilder().insert((int)0, (String)"https://api.mojang.com/users/profiles/minecraft/").append((String)string).toString()));
            a2.cachedPremiumUUIDs.put((Object)uUID, (Object)string2);
            if (string2.contains((CharSequence)string3)) return;
            a.disallow((AsyncPlayerPreLoginEvent.Result)AsyncPlayerPreLoginEvent.Result.KICK_OTHER, (String)new StringBuilder().insert((int)0, (String)a2.PREFIX).append((String)MessagesConfig.UUID_SPOOF$KICK_MESSAGE).toString());
            return;
        }
        catch (Exception exception) {
            a2.runTask = true;
            if (exception instanceof MalformedURLException) return;
            ProtectorSpigotLogger.warning((String)new StringBuilder().insert((int)0, (String)"Could not read account info (from mojang) of ").append((String)string).append((String)"! ").append((String)exception.getMessage()).append((String)" setting runTask boolean to true to prevent further exceptions.").toString());
        }
    }

    public SpoofUUIDExploitListener(WhitelistManager a, Plugin a2, boolean a3) {
        SpoofUUIDExploitListener a4;
        a4.whitelistManager = a;
        a4.plugin = a2;
        a4.runTask = a3;
    }
}

